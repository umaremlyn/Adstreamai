datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  email               String?  @unique
  username            String?  @unique
  lastActiveTimestamp DateTime @default(now())
  isAdmin             Boolean  @default(false)

  paymentProcessorUserId        String?   @unique
  lemonSqueezyCustomerPortalUrl String?
  subscriptionStatus            String?
  subscriptionPlan              String?
  sendNewsletter                Boolean   @default(false)
  datePaid                      DateTime?
  credits                       Int       @default(3)

  campaigns           Campaign[]
  gptResponses        GptResponse[]
  contactFormMessages ContactFormMessage[]
  files               File[]
}

model Campaign {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  productName    String
  targetAudience String
  tone           String
  status         CampaignStatus @default(draft)
  adCopies       AdCopy[]
  user           User           @relation(fields: [userId], references: [id])
  userId         String

  @@index([userId])
  @@index([status])
}

model AdCopy {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  headline         String
  body             String
  cta              String
  variations       Json // Stores array of variation strings
  performanceScore Float?   @default(0.0)
  campaign         Campaign @relation(fields: [campaignId], references: [id])
  campaignId       String

  @@index([campaignId])
}

enum CampaignStatus {
  draft
  active
  paused
}

// Remove if no longer needed
model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  content   String
  response  String
  userId    String
}

// Keep existing models below unchanged
model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  type      String
  key       String
  uploadUrl String
  url       String
  updatedAt DateTime @updatedAt
}

model DailyStats {
  id                        Int              @id @default(autoincrement())
  date                      DateTime         @unique @default(now())
  totalViews                Int              @default(0)
  prevDayViewsChangePercent String           @default("0")
  userCount                 Int              @default(0)
  paidUserCount             Int              @default(0)
  userDelta                 Int              @default(0)
  paidUserDelta             Int              @default(0)
  totalRevenue              Float            @default(0)
  totalProfit               Float            @default(0)
  sources                   PageViewSource[]
}

model PageViewSource {
  name         String
  date         DateTime    @default(now())
  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId Int?
  visitors     Int

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   String
  level     String
}

model ContactFormMessage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
}
